<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/res/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.study.test" />
	
	<!-- BoardWeb4에서 우리가 public static getCon() 이라고 보면됨 -->
	<!-- 우리가 getCon할때 굳이 안썻던 내용도있지만 히카리라는 아저씨가 테스트용으로 추가적으로 넣어놓은 부가적 기능  -->
	<!-- src/main/resources 경로안에 config.properties 파일에 있는값을 참조해서 사용하였음  -->
	<beans:bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<beans:property name="poolName" value="springHikariCP" />
		<beans:property name="connectionTestQuery" value="SELECT 1 FROM DUAL" />
		<beans:property name="driverClassName" value="com.mysql.cj.jdbc.Driver" />
		<beans:property name="maximumPoolSize" value="10" />
		<beans:property name="idleTimeout" value="3000" />
		
		<!-- 집에서 DB url 연결할때 serverTimezone 에러시 config.properties파일 안에 값 추가해주기 : &amp;serverTimezone=UTC -->
		 					
		
		<beans:property name="jdbcUrl" value="jdbc:mysql://localhost:3306/Study?characterEncoding=UTF-8&amp;serverTimezone=UTC "/>
		<beans:property name="username" value="root" />
		<beans:property name="password" value="orcl" />
		 
		 
		 
		<!-- 배포할시 !!!!!!!!   위에꺼 지우고 내 배포자료 메모장에있는거 그대로 복붙하기(1.21 건망증으로인해 아디 비번 입력없이 시도했음) -->
		
	</beans:bean>
	
	<!-- BoardWeb4에서 close() 각 DB연결한 Connection, PreparedStatement, ResultSet close() 해주는 것 -->
	<beans:bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<beans:constructor-arg ref="hikariConfig" /> <!-- constructor-arg ref="" 생성자에 값 넣는 것 -->
	</beans:bean>
	
	
	<!-- mybatis 랑 spring 연동 모듈 -->
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="configLocation" value="WEB-INF/spring/mybatis-alias.xml" />
	</beans:bean>
	
	<!-- 사진 업로드 멀티파트 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="52428800" /> <!-- 5MB -->
		<beans:property name="defaultEncoding" value="utf-8" />			
	</beans:bean>
	
	
	<!-- 얘는 인터페이스의 @Mapper를 찾는 애 -->
	<mybatis-spring:scan base-package="com.study.test"/> <!--  하단 탭에Namespace import 안해서 빨간줄 뜨는것  -->
	
			
			
			
	<!-- 이메일 관련 -->
	<beans:bean id="mailSender"	class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<beans:property name="host" value="smtp.naver.com" />
		<beans:property name="port" value="465" /><!-- 465 or 25 -->
		<beans:property name="username" value="ddw0099" />
		<beans:property name="password" value="tkfkd123#@!" />
		<beans:property name="defaultEncoding" value="utf-8" />
		<beans:property name="javaMailProperties">
			<beans:props>
				<beans:prop key="mail.transport.protocol">smtp</beans:prop>
				<beans:prop key="mail.smtps.ssl.checkserveridentity">true</beans:prop>
				<beans:prop key="mail.smtps.ssl.trust">true</beans:prop>
				<beans:prop key="mail.smtp.auth">true</beans:prop>
				<beans:prop key="mail.smtp.starttls.enable">false</beans:prop>
				<beans:prop key="mail.debug">true</beans:prop>
				<beans:prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>
	
	
	
	<!-- 트랜지션 사용하기위해 등록하는 것 
	<beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean>
	
	<tx:annotation-driven transaction-manager="transactionManager" />
	-->
	
	
	<!-- 인터셉터(쿠키관련 문제있어서 일단 주석처리) 다시 짜야됨 -->	
	<!-- 
	<interceptors>
		<interceptor>
			<mapping path="/**"/>			
			<beans:bean class="com.jy.hibaby.LoginCheckInterceptor"/>
		</interceptor>
	</interceptors>
	 -->
	
	
	<!-- websocket handler -->
	<!-- 
	<beans:bean id="echoHandler" class="com.study.test.swp.EchoHandler" />
	
	<websocket:handlers>
		<websocket:mapping handler="echoHandler" path="/echo" />
		<websocket:handshake-interceptors>
			<beans:bean
				class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor">
			</beans:bean>
		</websocket:handshake-interceptors>
	</websocket:handlers>
	 -->
	
</beans:beans>
